generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  address     String?
  createdDate DateTime @default(now())
  description String
  images      String[]
  videos      String[]
  links       String[]
  name        String   @unique
  tags        String[]
  openingHrs  String?
  closingHrs  String?
  telephone   String?
  website     String[]
  rating      Int?     @default(0)
  hasOwner    Boolean?
  ownerId     String?  @db.ObjectId
  reviews     Review[]
  createdBy   User?    @relation(fields: [createdById], references: [id])
  createdById String   @db.ObjectId
  isDeleted   Boolean? @default(false)
}

model Comments {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  body           String
  createdDate    DateTime @default(now())
  helpfulVotes   Int?     @default(0)
  unhelpfulVotes Int?     @default(0)
  review         Review?  @relation(fields: [reviewId], references: [id])
  user           User?    @relation(fields: [userId], references: [id])
  reviewId       String   @db.ObjectId
  userId         String   @db.ObjectId
  isDeleted      Boolean? @default(false)
}

model Review {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  body           String
  comments       String[]
  createdDate    DateTime   @default(now())
  helpfulVotes   Int?       @default(0)
  rating         Int
  title          String
  unhelpfulVotes Int?       @default(0)
  product        Product?   @relation(fields: [productId], references: [id])
  user           User?      @relation(fields: [userId], references: [id])
  productId      String     @db.ObjectId
  userId         String     @db.ObjectId
  isVerified     Boolean?
  verifiedBy     String?
  isPublic       Boolean    @default(true)
  images         String[]
  videos         String[]
  links          String[]
  createdBy      String?
  isDeleted      Boolean?   @default(false)
  Comments       Comments[]

  @@unique(fields: [title, userId, productId], name: "unique_review", map: "unique_review")
}

model User {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userName    String     @unique
  avatar      String?
  createdDate DateTime   @default(now())
  email       String     @unique
  firstName   String
  lastName    String
  review      Review[]
  clerkUserId String
  product     Product[]
  isDeleted   Boolean?   @default(false)
  Comments    Comments[]
}
